"""
Social Media Sentiment and Stock Prices Analysis

This script demonstrates a simple data analytics project that explores the relationship between
social media sentiment and stock prices using sample synthetic data.

Requirements:
- pandas
- numpy
- matplotlib
- seaborn

Usage:
Run this script directly after installing the required packages:
pip install pandas numpy matplotlib seaborn

"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# 1. Generate sample data for social media sentiment (daily sentiment scores)
dates = pd.date_range(start="2023-01-01", periods=90, freq='D')

# Simulated social media sentiment score (-1 to 1) with some random noise
np.random.seed(42)
sentiment_scores = np.sin(np.linspace(0, 3*np.pi, 90)) + np.random.normal(0, 0.3, 90)

social_sentiment_df = pd.DataFrame({
    'date': dates,
    'sentiment_score': sentiment_scores
})

# 2. Generate sample stock prices correlated loosely with sentiment
base_price = 100
price_changes = sentiment_scores * 5 + np.random.normal(0, 2, 90)
stock_prices = base_price + np.cumsum(price_changes)

stock_price_df = pd.DataFrame({
    'date': dates,
    'close_price': stock_prices
})

# 3. Merge datasets on date
merged_df = pd.merge(social_sentiment_df, stock_price_df, on='date')

# 4. Plotting

plt.figure(figsize=(14, 6))

# Sentiment score plot
plt.subplot(2, 1, 1)
sns.lineplot(data=merged_df, x='date', y='sentiment_score', marker='o', color='blue')
plt.title("Social Media Sentiment Over Time")
plt.ylabel("Sentiment Score")
plt.grid(True)

# Stock price plot
plt.subplot(2, 1, 2)
sns.lineplot(data=merged_df, x='date', y='close_price', marker='o', color='green')
plt.title("Stock Prices Over Time")
plt.ylabel("Close Price ($)")
plt.grid(True)

plt.tight_layout()
plt.show()

# 5. Correlation Analysis
correlation = merged_df['sentiment_score'].corr(merged_df['close_price'])
print(f"Correlation between social media sentiment and stock prices: {correlation:.3f}")

# 6. Scatter plot with regression line
plt.figure(figsize=(8, 6))
sns.regplot(x='sentiment_score', y='close_price', data=merged_df, scatter_kws={'alpha':0.7})
plt.title("Correlation between Social Media Sentiment and Stock Prices")
plt.xlabel("Sentiment Score")
plt.ylabel("Close Price ($)")
plt.grid(True)
plt.show()

"""

This simple example sets a foundation for analyzing social media sentiment in relation to stock prices.
You can extend this project by:
- Integrating real social media data (e.g., Twitter API)
- Using actual stock market data (e.g., Yahoo Finance API)
- Applying advanced sentiment analysis (e.g., NLP models)
- Using more sophisticated time series and statistical models
"""
